import asyncio
import logging

from aiogram import Dispatcher, Bot, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.utils import markdown

import config

dp = Dispatcher()


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {markdown.hbold(message.from_user.full_name)}!')


@dp.message(Command('help'))
async def handle_help(message: types.Message):
    text = '–≠–≤–∞–∫—É–∞—Ü–∏—è –¢–°. –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö.'
    await message.answer(text=text)


@dp.message()
async def echo_message(message: types.Message):

    await message.answer(
        text='Wait a second...',
    )
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.reply(text='Something new üôÇ')


async def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(
        token=config.BOT_TOKEN,
        parse_mode=ParseMode.HTML,
    )
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
