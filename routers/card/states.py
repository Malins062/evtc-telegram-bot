from datetime import datetime
from typing import TypedDict

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils import markdown

EMPTY = '–ø—É—Å—Ç–æ'


class Card(TypedDict, total=False):
    dt: str
    gn: str
    model: str
    address: str
    article: str
    protocol: str


class CardStates(StatesGroup):
    dt = State()
    gn = State()
    model = State()
    address = State()
    article = State()
    protocol = State()


async def init_state(state: FSMContext) -> FSMContext:
    now_dt = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    data: Card = {'dt': now_dt}
    new_state = state
    await new_state.clear()
    await new_state.update_data(data)
    return new_state


def validate_card(data) -> bool:
    return all(data.get(key, False) for key in Card)


# markdown.text(
#     markdown.hbold(f'üöî –ö–ê–†–¢–û–ß–ö–ê –ù–ê–†–£–®–ï–ù–ò–Ø (#{message.from_user.id}) üöî'),
#     '',
#     f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {markdown.hitalic(user_data.get("dt", states.EMPTY))}',
#     f'–ù–æ–º–µ—Ä –¢–°: {markdown.hitalic(user_data.get("gn", states.EMPTY))}',
#     f'–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å: {markdown.hitalic(user_data.get("model", states.EMPTY))}',
#     f'–ê–¥—Ä–µ—Å: {markdown.hitalic(user_data.get("address", states.EMPTY))}',
#     f'–°—Ç–∞—Ç—å—è –ö–æ–ê–ü –†–§: {markdown.hitalic(user_data.get("article", states.EMPTY))}',
#     f'–ü—Ä–æ—Ç–æ–∫–æ–ª: {markdown.hitalic(user_data.get("protocol", states.EMPTY))}',
#     '',
#     # f'üëá –î–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ ({MainButtonText.CARD}, {MainButtonText.SEND}, '
#     # f'{MainButtonText.CLEAR}, ) üëá',
#     sep='\n'
# ),


def get_card_text(user_data, user_id) -> str:
    text = markdown.text(
        markdown.hbold(f'üöî –ö–ê–†–¢–û–ß–ö–ê –ù–ê–†–£–®–ï–ù–ò–Ø (#{user_id}) '),
        '',
        f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {markdown.hitalic(user_data.get("dt", EMPTY))}',
        f'–ù–æ–º–µ—Ä –¢–°: {markdown.hitalic(user_data.get("gn", EMPTY))}',
        f'–ú–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å: {markdown.hitalic(user_data.get("model", EMPTY))}',
        f'–ê–¥—Ä–µ—Å: {markdown.hitalic(user_data.get("address", EMPTY))}',
        f'–°—Ç–∞—Ç—å—è –ö–æ–ê–ü –†–§: {markdown.hitalic(user_data.get("article", EMPTY))}',
        f'–ü—Ä–æ—Ç–æ–∫–æ–ª: {markdown.hitalic(user_data.get("protocol", EMPTY))}',
        '',
        sep='\n'
    )
    return text
