import logging

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from evtc_bot.config.settings import users
from evtc_bot.db.redis import redis_storage as storage
from evtc_bot.filters.is_contact import IsTrueContact
from evtc_bot.handlers.card.base_handlers import handle_card
from evtc_bot.states.card_states import init_state
from evtc_bot.states.user_states import UserStates

router = Router(name=__name__)
logger = logging.getLogger(__name__)


@router.message(UserStates.get_phone, F.contact, IsTrueContact())
async def handle_get_true_contact(
    message: types.Message, state: FSMContext, phone_number: str
):
    await state.update_data(get_phone=True)
    user_id = state.key.user_id

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ Redis
    await storage.redis.sadd('users', str(user_id))

    # Access verification
    # if not (phone_number in get_phones()):
    #     logger.warning(f'–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: #{user_id} - {phone_number}')
    #     await message.reply(
    #         text=markdown.text(
    #             '‚õî –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º!',
    #             '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
    #             sep='\n',
    #         ),
    #         reply_markup=build_support_keyboard()
    #     )
    #
    #     return

    users[user_id] = phone_number
    await init_state(state)

    logger.info(f"–û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫–æ–Ω—Ç–∞–∫—Ç—É: #{user_id} - {phone_number}")

    await message.answer(
        text="‚úî –î–æ—Å—Ç—É–ø –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º - –æ—Ç–∫—Ä—ã—Ç.",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)


@router.message(UserStates.get_phone, F.contact)
async def handle_get_fake_contact(message: types.Message):
    logger.warning(
        f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ñ–µ–π–∫–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç: #{message.from_user.id} - {message.from_user.full_name}"
    )
    await message.reply(
        text=markdown.text(
            "‚õî –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!",
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–¥–æ –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç! üëá",
            sep="\n",
        )
    )


@router.message(UserStates.get_phone)
async def handle_get_phone_invalid(message: types.Message):
    await message.reply(
        text=markdown.text(
            "‚õî –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤–∏–¥–µ–Ω –º–Ω–µ –≤ –í–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!",
            "–î–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üëá",
            sep="\n",
        )
    )
