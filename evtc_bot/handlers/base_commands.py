from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from evtc_bot import __version__
from evtc_bot.config.settings import settings
from evtc_bot.handlers.card.base_handlers import handle_card
from evtc_bot.keyboards.card import (
    CARD_BUTTONS,
    SEND_BUTTON,
    get_annotations_card_buttons,
)
from evtc_bot.states.card_states import init_state

router = Router(name=__name__)


@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await message.answer(
        text=markdown.text(
            f"üòâ –ü—Ä–∏–≤–µ—Ç, {markdown.hbold(message.from_user.full_name)}!",
            "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ, —Ç—É–¥–∞ –∫—É–¥–∞ –Ω–∞–¥–æ!",
            " ",
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–µ–¥–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ",
            "1) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º);",
            "2) –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¢–°;",
            f'3) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "{CARD_BUTTONS[SEND_BUTTON].title}".',
            sep="\n",
        ),
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)


@router.message(Command("card", prefix=settings.prefixes_command))
async def handle_init_card(message: types.Message, state: FSMContext):
    await handle_card(message, state)


@router.message(Command("clear", prefix=settings.prefixes_command))
async def handle_clear_card(message: types.Message, state: FSMContext):
    await init_state(state)
    await message.answer(
        text="–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞ üëå",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)


@router.message(Command("help", prefix=settings.prefixes_command))
async def handle_help(message: types.Message, state: FSMContext):
    await message.answer(
        text=markdown.text(
            f'–ß–∞—Ç-–±–æ—Ç {markdown.hbold("–≠–≤–∞–∫—É–∞—Ü–∏—è –¢–°")} (v{markdown.hitalic(__version__)}).',
            "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö.",
            " ",
            markdown.hbold("–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"),
            get_annotations_card_buttons(),
            sep="\n",
        ),
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)
