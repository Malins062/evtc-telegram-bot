import logging

from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown

from config.settings import settings, users
from keyboards.card import CARD_BUTTONS, SEND_BUTTON, get_annotations_card_buttons
from handlers.card.base_handlers import handle_card
from states.card_states import init_state

router = Router(name=__name__)
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    logger.error('Hi')
    await message.answer(
        text=markdown.text(
            f'üòâ –ü—Ä–∏–≤–µ—Ç, {markdown.hbold(message.from_user.full_name)}!',
            '–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ, —Ç—É–¥–∞ –∫—É–¥–∞ –Ω–∞–¥–æ!',
            ' ',
            '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–µ–¥–µ–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ',
            '1) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–µ—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º);',
            '2) –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¢–°;',
            f'3) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "{CARD_BUTTONS[SEND_BUTTON].title}".',
            sep='\n',
        ),
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)


@router.message(Command('card', prefix=settings.prefix))
async def handle_init_card(message: types.Message, state: FSMContext):
    await handle_card(message, state)


@router.message(Command('clear', prefix=settings.prefix))
async def handle_clear_card(message: types.Message, state: FSMContext):
    await init_state(state)

    user_id = state.key.user_id
    if users.get(user_id):
        try:
            await message.answer(
                text='–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞ üëå',
                reply_markup=types.ReplyKeyboardRemove(),
            )
            # await message.answer(
            #     text=get_card_text(user_data),
            #     reply_markup=build_card_keyboard(validate_card(user_data)),
            # )

        except Exception as err:
            error_text = '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è'
            logger.error(f'{error_text}: {err}')

            error_text += ' ü•µ'
            await message.answer(
                text=error_text,
                reply_markup=types.ReplyKeyboardRemove(),
            )
    await handle_card(message, state)


@router.message(Command('help', prefix=settings.prefix))
async def handle_help(message: types.Message, state: FSMContext):
    await message.answer(
        text=markdown.text(
            f'–ß–∞—Ç-–±–æ—Ç {markdown.hbold("–≠–≤–∞–∫—É–∞—Ü–∏—è –¢–°")}.',
            '–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö.',
            ' ',
            markdown.hbold('–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:'),
            get_annotations_card_buttons(),
            sep='\n'
        ),
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await handle_card(message, state)
